trigger:
  branches:
    include:
    - master
     - rel/*
   
pr:
  branches:
    include:
    - master
    - rel/*

variables:
  BuildConfiguration: Release
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true

jobs:
- job: Build
  pool:
    name: Hosted Windows 2019 with VS2019
    demands: msbuild

  strategy:
    matrix:
      Channel_CD_Web:
        ChannelName: CD-Web
        DistributionUrl: https://mywpfapp.azurewebsites.net/CD
        MsixPackageId: MyWPFApp.DevOpsDemo.CD
        MsixPublisherId: CN=build
        MsixPackageDisplayName: MyWPFApp (CD)
        MsixBuildMode: SideLoadOnly
        MsixGenerateAppInstaller: true
      Channel_Prod_Web:
        ChannelName: Prod-Web
        DistributionUrl: https://mywpfapp.z5.web.core.windows.net/Prod
        MsixPackageId: MyWPFApp.DevOpsDemo
        MsixPublisherId: CN=build
        MsixPackageDisplayName: MyWPFApp (Prod)
        MsixBuildMode: SideLoadOnly
        MsixGenerateAppInstaller: true
      Channel_Prod_Store:
        ChannelName: Prod-Store
        DistributionUrl: https://not/used
        MsixPackageId: MyWPFApp
        MsixPublisherId: CN=E40A5878-9BC7-45A3-BBFC-B988EA6795B5
        MsixPackageDisplayName: MyWPFApp (Store)
        MsixBuildMode: CI
        MsixGenerateAppInstaller: false

  steps:
  - task: DotNetCoreCLI@2  
    inputs:
      command: custom
      custom: tool
      arguments: install -g nbgv
    displayName: Install NBGV tool

  - script: nbgv cloud -c
    displayName: Set Version

  - powershell: |
      # Update appxmanifest. This must be done before build.
      # Set the per-channel values into the appxmanifest, replacing the checked-in values
      [xml]$manifest= get-content ".\MyWPFApp.Package\Package.appxmanifest"
      $manifest.Package.Identity.Version = "$(GitBuildVersionSimple).0"
      $manifest.Package.Identity.Name = "$(MsixPackageId)"
      $manifest.Package.Identity.Publisher = "$(MsixPublisherId)"
      $manifest.Package.Properties.DisplayName = "$(MsixPackageDisplayName)"
      $manifest.Package.Applications.Application.VisualElements.DisplayName = "$(MsixPackageDisplayName)"
      $manifest.save(".\MyWPFApp.Package\Package.appxmanifest")

    displayName: Update manifest version

  - powershell: |
      # Update App Insights instrumentation key
      [xml]$doc = Get-Content ".\MyWPFApp\ApplicationInsights.config"
      $doc.ApplicationInsights.InstrumentationKey = "$(AppInsightsKey)"
      $doc.save(".\MyWPFApp\ApplicationInsights.config")

    displayName: Set AppInsights Config
    env:
      AppInsightsKey: $(AppInsightsKey)
    condition: and(succeeded(), not(eq(variables['build.reason'], 'PullRequest')), not(eq(variables['AppInsightsKey'], '')))

  - task: MSBuild@1
    displayName: Build for $(BuildConfiguration)
    inputs:
      solution: MyWPFApp.sln
      platform: Any CPU
      msbuildArguments: /restore /p:AppInstallerUri=$(DistributionUrl) /p:UapAppxPackageBuildMode=$(MsixBuildMode) /p:GenerateAppInstallerFile=$(MsixGenerateAppInstaller)
      configuration: $(BuildConfiguration)
      maximumCpuCount: false

  - script: copy build.cer MyWPFApp.Package\AppPackages\MyWPFApp.Package_$(GitBuildVersionSimple).0_Test\MyWPFApp.Package_$(GitBuildVersionSimple).0.cer
    displayName: Copy Certificate to versioned dir
    condition: and(succeeded(), not(eq(variables['ChannelName'], 'Prod-Store')))

  - task: PublishPipelineArtifact@0
    inputs:
      artifactName: $(ChannelName)
      targetPath: MyWPFApp.Package/AppPackages

